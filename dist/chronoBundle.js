/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/chrono.js":
/*!***********************!*\
  !*** ./src/chrono.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass ChronlyHMSElement extends HTMLElement {\n  constructor() {\n      super();\n\n      this.myElement = this.attachShadow({ mode: 'open' });\n\n\n      // needed for setting inputs when value attribute is added to chronlyHMS \n      // <chronly-hms id=\"bobPrepop\" value=\"99:09:09.999\"></chronly-hms>\n\n      this.value = this.getAttribute('value');\n\n\n      this.boot();\n\n\n  }  // end constructor\n\n  get value() {\n\n      // return this.getAttribute('value');\n\n      if (this.myElement.querySelector('input[name=\"startHours\"]') !== null) {\n\n          return this.myElement.querySelector('input[name=\"startHours\"]').value +\n              ':' + this.myElement.querySelector('input[name=\"startMinutes\"]').value +\n              ':' + this.myElement.querySelector('input[name=\"startSeconds\"]').value +\n              '.' + this.myElement.querySelector('input[name=\"startMilliSecs\"]').value;\n\n      }\n      else {\n\n          return null;\n\n      }\n  }\n\n  set value(val) {\n\n      // for setting the value in js (like document.querySelector(\"#bobPrepop\").value = \"05:05:05.005\")\n      if (val) {\n\n\n          console.log(val);\n\n\n          if (/(^[0-9][0-9]):([0-5][0-9]):([0-5][0-9])\\.([0-9][0-9][0-9]$)/.exec(val)) {\n\n\n              // split val\n\n              var timeArray = val.split(/[.:]+/);\n\n              console.log('time array is ' + timeArray[0] + ':' + timeArray[1] + ':' + timeArray[2] + ':' + timeArray[3]);\n\n              console.log('this.id = ' + this.id);\n\n              setTimeout(() => {\n\n                  this.myElement.querySelector('input[name=\"startHours\"]').value = timeArray[0];\n                  this.myElement.querySelector('input[name=\"startMinutes\"]').value = timeArray[1];\n                  this.myElement.querySelector('input[name=\"startSeconds\"]').value = timeArray[2];\n                  this.myElement.querySelector('input[name=\"startMilliSecs\"]').value = timeArray[3];\n              }, 0);\n\n\n\n              this.setAttribute('value', val);\n\n          }\n          else {\n\n              console.warn(`The specified value ${val} does not conform to the required format.  The format is \"HH:mm:ss.SSS\" where HH is 00-99, mm is 00-59, ss is 00-59, and SSS is 000-999.`);\n\n          }\n\n          //  I think this is for empty string to clear value\n          // gives a False bool and removes value from Webcomponent chronlyHMS\n      } else {\n\n\n          setTimeout(() => {\n\n              this.myElement.querySelector('input[name=\"startHours\"]').value = '00';\n              this.myElement.querySelector('input[name=\"startMinutes\"]').value = '00';\n              this.myElement.querySelector('input[name=\"startSeconds\"]').value = '00';\n              this.myElement.querySelector('input[name=\"startMilliSecs\"]').value = '000';\n\n          }, 0);\n\n\n          this.removeAttribute('value');\n      }\n  }\n\n  /**\n   * eventlistener that adds arrow key input of values (up/down) and place toggling (left/right) triggered by\n   * the change event of the input \n   * @method\n   * @see boot()\n   */\n\n  addArrowKeyInput() {\n\n\n      console.log('1 this: ' + this);\n      console.log('1 this.myElement: ' + this.myElement);\n      console.log('1 this.myElement active: ' + this.myElement);\n\n      var mE = this.myElement;\n\n      // Left and Right arrow key toggle between HMSmS\n      // this depends on data-attributes ex. data-tp=\"1\" in HTML\n\n      this.myElement.querySelector(\"div.timeCase\")\n          .addEventListener('keydown', function (event) {\n\n              var et = event.target;\n              var tp_active = mE.activeElement.dataset.tp;\n\n              switch (true) {\n\n                  case event.key == \"ArrowLeft\":\n\n                      if (tp_active >= 2) {\n                          tp_active--;\n                      }\n\n                      et.parentElement.querySelector(\"[data-tp='\" + tp_active + \"']\").focus();\n                      setTimeout(function () { et.parentElement.querySelector(\"[data-tp='\" + tp_active + \"']\").select(); }, 5);\n\n                      break;\n\n                  case event.key == \"ArrowRight\":\n                      // tp_active = this.myElement.shadowRoot.activeElement.dataset.tp;\n\n                      if (tp_active <= 3) {\n                          tp_active++;\n                      }\n\n                      et.parentElement.querySelector(\"[data-tp='\" + tp_active + \"']\").focus();\n                      setTimeout(function () { et.parentElement.querySelector(\"[data-tp='\" + tp_active + \"']\").select(); }, 5);\n\n                      break;\n\n                  // these keep the input selected\n                  case event.key == \"ArrowUp\":\n\n                      setTimeout(function () { mE.activeElement.select(); }, 5);\n\n                      break;\n\n                  case event.key == \"ArrowDown\":\n\n                      setTimeout(function () { mE.activeElement.select(); }, 5);\n\n                      break;\n\n                  // this is good for testing, to determine whether a key press is detected\n                  case /^([0-9]?)$/.test(event.key):\n\n                      break;\n\n              }\n          });\n  }\n\n  /**\n   * used by boot() to update inputs marked with data-univHMS\n   * @method\n   * @see boot()\n   */\n\n  addHTML() {\n\n      var spanIn = document.createElement(\"div\");\n\n      spanIn.classList.add('timeCase');\n\n      var template = document.createElement('template');\n\n      template.innerHTML = `\n          <input id=\"inShadow\" type=\"number\" class=\"sH D2 ts_digit\" name=\"startHours\" data-tp=\"1\" min=\"-1\" max=\"100\" value=\"00\" >\n          <span class=\"bds-h\">:</span>\n          <input type=\"number\" class=\"sM D2 ts_digit\" name=\"startMinutes\" data-tp=\"2\" min=\"-1\" max=\"60\" value=\"00\">\n          <span class=\"bds-m\">:</span>\n          <input type=\"number\" class=\"sS D2 ts_digit\" name=\"startSeconds\" data-tp=\"3\" min=\"-1\" max=\"60\" value=\"00\">\n          <span class=\"bds-s\">.</span>\n          <input type=\"number\" class=\"sMS D3 ts_digit\" name=\"startMilliSecs\" data-tp=\"4\" min=\"-10\" max=\"1010\" step=\"10\" value=\"000\">\n          <div id=\"svgContainer\">\n              <svg xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\"\n              focusable=\"false\" data-prefix=\"fal\" data-icon=\"stopwatch\" class=\"svg-inline--fa fa-stopwatch fa-w-14\"\n              role=\"img\" viewBox=\"0 0 448 512\">\n              <path xmlns=\"http://www.w3.org/2000/svg\" fill=\"currentColor\" d=\"M393.9 184l22.6-22.6c4.7-4.7 4.7-12.3 0-17l-17-17c-4.7-4.7-12.3-4.7-17 0l-20.7 20.7c-31.1-27.5-70.4-45.9-113.8-50.8V48h28c6.6 0 12-5.4 12-12V12c0-6.6-5.4-12-12-12H172c-6.6 0-12 5.4-12 12v24c0 6.6 5.4 12 12 12h28v49.4C96.4 109.3 16 197.2 16 304c0 114.9 93.1 208 208 208s208-93.1 208-208c0-44.7-14.1-86.1-38.1-120zM224 464c-88.4 0-160-71.6-160-160s71.6-160 160-160 160 71.6 160 160-71.6 160-160 160zm12-112h-24c-6.6 0-12-5.4-12-12V204c0-6.6 5.4-12 12-12h24c6.6 0 12 5.4 12 12v136c0 6.6-5.4 12-12 12z\"/>\n              </svg>\n          </div>\n          <style>\n*:focus {\noutline: none;\n}\n\n\ndiv.timeCase{\ndisplay: inline-flex;\nflex-direction: row;\nmax-width: 300px;\npadding: 3px;\nborder-style: solid;\nborder-width: 1px;\nborder-radius: 2px;\n}\n\n\n/* Each input width set and blinking cursor 'caret' removed */\ndiv.timeCase input{\ncaret-color: transparent;\nwidth: 15px;\npadding-top:1px;\n}\n\n\ndiv.timeCase .D3{\nwidth: 25px;\n}\n\n\n/* Hiding the up and down arrow */\n/*https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp*/\n/* Chrome, Safari, Edge, Opera */\n\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n-webkit-appearance: none;\nmargin: 0;\n}\n\n\n/* Firefox */\n\ninput[type=number] {\n/* -moz-appearance: textfield; */\n-moz-appearance: textarea;\n-webkit-appearance: textarea;\n}\n\n\ndiv.timeCase:focus-within {\nborder: 2px solid black;\npadding: 2px;\n}\n\n\n.ts_digit {\nborder: none;\n} \n\n/* between digit span */\n.bds{\npadding-bottom: 1px;\n}\n\n#svgContainer {\nwidth: 12px;\nheight: 12px;\npadding-top: 1px;\npadding-right: 2px;\ncolor: black;\n}  \n\n*:disabled {\nbackground-color: grey;\ncolor: lightgrey;\nopacity: .6;\n}\n</style> `\n\n      spanIn.appendChild(template.content);\n\n\n      // const chronlyCssLink = document.createElement('link');\n      // let link = document.createElement('link');\n      // chronlyCssLink.setAttribute('rel', 'stylesheet');\n      // chronlyCssLink.setAttribute('href', 'chronlyWebComponent.css');\n\n\n      \n\n\n\n      this.myElement.appendChild(spanIn);\n\n    //  this.myElement.appendChild(chronlyCssLink);\n\n  }\n\n\n  /**\n   * eventlistener that adds number looping for up and down keys triggered by\n   * the change event of the input \n   * @method\n   * @see boot()\n   */\n\n  addNumberLooping() {\n\n      // Numeric Value looping (eventually this can be 'parameterised' refactored)\n      // ex. 99 uparrow to 0 hours, 59 uparrow to 0 minutes and seconds, 990 uparrow to 010, downarrow 000 milliseconds\n\n      const sH = this.myElement.querySelector(\"input.sH\");\n      sH.addEventListener('change', function (event) {\n\n          if (sH.value == 100) {\n              sH.value = '00';\n          }\n          if (sH.value == -1) {\n              sH.value = 99;\n          }\n\n      });\n\n      const sM = this.myElement.querySelector(\"input.sM\");\n      sM.addEventListener('change', function (event) {\n\n          if (sM.value == 60) {\n              sM.value = '00';\n          }\n          if (sM.value == -1) {\n              sM.value = 59;\n          }\n\n      });\n\n      const sS = this.myElement.querySelector(\"input.sS\");\n      sS.addEventListener('change', function (event) {\n\n          if (sS.value == 60) {\n              sS.value = '00';\n          }\n\n          if (sS.value == -1) {\n              sS.value = 59;\n          }\n\n      });\n\n\n      const sMS = this.myElement.querySelector(\"input.sMS\");\n      sMS.addEventListener('change', function (event) {\n\n          if (sMS.value == 1000) {\n              sMS.value = \"010\";\n          }\n\n          if (sMS.value == -10) {\n              sMS.value = 990;\n          }\n\n          if (sMS.value == 0) {\n          }\n\n      });\n  }\n\n  addNumericInput() {\n\n      const mE = this.myElement;\n\n      // https://stackoverflow.com/questions/469357/html-text-input-allow-only-numeric-input\n      // Digit input 0-9  (typed in by user)\n\n      function setInputFilter(inputElement, inputFilter) {\n          // this sets a listener and  immediately updates the value of the input number (note: can update this from input text, like by removing setSelectionRange )\n\n          console.log('inputElement: ' + inputElement);\n          window.inputElement = inputElement;\n\n          inputElement.addEventListener('keyup', function (event) {\n\n              window.kue = event;\n\n              if (/^([0-9]?)$/.test(event.key)) {\n                  if (inputFilter(this.value)) {\n                      this.oldValue = this.value;\n                      this.oldSelectionStart = this.selectionStart;\n                      this.oldSelectionEnd = this.selectionEnd;\n                  } else if (this.hasOwnProperty(\"oldValue\")) {\n                      this.value = this.oldValue;\n                      // this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);\n                  } else {\n                      this.value = \"\";\n                  }\n              }\n          });\n      }\n\n\n      // three boxes, hours or minutes and seconds (are the same) but milliseconds is different\n\n      // sH\n      var sH = this.myElement.querySelector('input.sH');\n\n      setInputFilter(sH, function (value) {\n\n          var newV = /^([0-9]?|[0-9][0-9]?)$/.test(value);\n\n\n          if (value.length === 2) {\n\n              mE.querySelector('input.sM').focus();\n              mE.querySelector('input.sM').select();\n\n          }\n\n          return newV;\n\n      });\n\n      var sM = this.myElement.querySelector('input.sM');\n      setInputFilter(sM, function (value) {\n\n\n          var newV = /^([0-9]?|[0-5][0-9]?)$/.test(value);\n\n          if (value > 5 || value.length === 2) {\n\n              mE.querySelector('input.sS').focus();\n              mE.querySelector('input.sS').select();\n\n          }\n\n          return newV;\n\n      });\n\n      var sS = this.myElement.querySelector('input.sS');\n      setInputFilter(sS, function (value) {\n\n          var newV = /^([0-9]?|[0-5][0-9]?)$/.test(value);\n\n          if (value > 5 || value.length === 2) {\n\n              mE.querySelector('input.sMS').focus();\n              mE.querySelector('input.sMS').select();\n\n          }\n\n          return newV;\n\n      });\n\n\n      var sMS = this.myElement.querySelector('input.sMS');\n      setInputFilter(sMS, function (value) {\n\n          var newV = /^([0-9]?|[0-9][0-9]?|[0-9][0-9][0-9]?)$/.test(value);\n\n\n          if (value.length === 3) {\n\n              mE.querySelector('input.sMS').blur();\n\n          }\n\n          return newV;\n\n      });\n\n  }\n\n\n  /**\n   * each time Chronly is newed up, the constructor uses checkBoot() to\n   * 1) check for an existing window.ChronlyFlag if there is one \n   * 2) clear events a) named events, b) remove \n   * 3) add events\n   * @method \n   */\n\n  checkBoot() {\n\n      this.boot();\n\n\n      // if (window.ChronlyFlag) {\n      //     this.reboot();\n      // }\n      // else {\n      //     this.boot();\n      // }\n  }\n\n\n\n  /**\n  * used by checkBoot() and externally exposed for user\n  * @method\n  * \n  */\n\n  boot() {\n\n      this.addHTML();\n    //  this.addCSS();\n      this.blockNonNumberInput();\n\n      // // set up event listeners\n      this.add0s();\n      this.addNumberLooping();\n      this.addArrowKeyInput();\n      this.addNumericInput();\n      this.addClicksToActivate();\n      this.nonNumericBugInHTML();\n      // this.updatePrototype();\n\n\n      /**\n       * window.ChronlyFlag declared here\n       * @global  \n       */\n   //   this.ChronlyFlag = true;\n  }\n\n\n\n  disable() {\n\n\n      var closure = this;\n\n\n      // disable chronly inputs on page\n\n      closure.shadowRoot.querySelectorAll(\".timeCase input\").forEach(el => el.disabled = 'true')\n\n\n  }\n\n  /**\n   * method adds the necessary CSS\n   * @method\n   * @see boot()\n   * /\n   \n   addCSS(){\n\n   }\n\n\n  /**\n   * eventlistener that adds 0s to preface numbers less than 10 triggered by\n   * the change event of the input \n   * @method\n   * @see boot()\n   */\n\n  add0s() {\n\n      // input for hours, minutes, seconds\n      this.myElement.querySelectorAll('input').forEach(i => i.addEventListener('change', function () {\n          if (!isNaN(this.value) && this.value.length === 1) {\n              this.value = '0' + this.value;\n          }\n      }));\n\n      // milliseconds\n      this.myElement.querySelectorAll(\"input.sMS\").forEach(i => i.addEventListener('change', function () {\n\n          if (!isNaN(this.value) && this.value.length === 2) {\n              this.value = '0' + this.value;\n          }\n\n      }));\n\n  }\n\n\n  // this needs to be updated or removed, test\n\n  blockNonNumberInput() {\n\n      document.querySelectorAll(\".timeCase input\").forEach(item =>\n\n          item.addEventListener('keypress', function (e) {\n\n              e = e || window.event;\n              var charCode = (typeof e.which == \"undefined\") ? e.keyCode : e.which;\n              var charStr = String.fromCharCode(charCode);\n\n              if (!charStr.match(/^[0-9]+$/))\n                  e.preventDefault();\n\n          }));\n  }\n\n\n  // second idea is to update prototype of ChronlyInputElement (class)\n\n  updatePrototype() {\n\n\n      ChronlyHMSElement.prototype.__defineGetter__('value', function () {\n\n          if (this.myElement.querySelector('input[name=\"startHours\"]') !== null) {\n\n              return this.myElement.querySelector('input[name=\"startHours\"]').value +\n                  ':' + this.myElement.querySelector('input[name=\"startMinutes\"]').value +\n                  ':' + this.myElement.querySelector('input[name=\"startSeconds\"]').value +\n                  '.' + this.myElement.querySelector('input[name=\"startMilliSecs\"]').value;\n\n          }\n          else {\n\n              return null;\n\n          }\n      });\n\n\n\n      ChronlyHMSElement.prototype.__defineSetter__('value', function (timeString) {\n\n          // will need warning about timeString format (like input type='time')\n\n          if (/(^[0-9][0-9]):([0-5][0-9]):([0-5][0-9])\\.([0-9][0-9][0-9]$)/.exec(timeString)) {\n\n              // split val\n\n              var timeArray = timeString.split(/[.:]+/);\n\n              this.myElement.querySelector('input[name=\"startHours\"]').value = timeArray[0];\n              this.myElement.querySelector('input[name=\"startMinutes\"]').value = timeArray[1];\n              this.myElement.querySelector('input[name=\"startSeconds\"]').value = timeArray[2];\n              this.myElement.querySelector('input[name=\"startMilliSecs\"]').value = timeArray[3];\n\n          }\n          else {\n\n              console.warn(`The specified value ${timeString} does not conform to the required format.  The format is \"HH:mm:ss.SSS\" where HH is 00-99, mm is 00-59, ss is 00-59, and SSS is 000-999.`);\n\n          }\n\n      });\n  }\n\n  /**\n   * eventlistener that adds click to activate input of values by the keyboard triggered by\n   * the click event of the input \n   * @method\n   * @see boot()\n   */\n\n  addClicksToActivate() {\n\n      this.myElement.querySelectorAll('input').forEach(i => i.addEventListener(\"click\", function () { this.select(); }))\n  }\n\n\n  noHours() {\n\n      var closure = this;\n\n      // hide chronly hours inputs on page\n\n      closure.shadowRoot.querySelectorAll(\".timeCase input.sH\").forEach(el => el.style.display = 'none');\n\n\n      // hide the hours colon on page\n\n      closure.shadowRoot.querySelectorAll(\".timeCase span.bds-h\").forEach(el => el.style.display = 'none');\n\n  }\n\n\n\n\n\n\n\n  /**\n   * eventlistener that adds key filtering to stop letters (or other non-numerics) from being input triggered by\n   * the keypress event of the input \n   * @method\n   * @see boot()\n   */\n\n  nonNumericBugInHTML() {\n\n      this.myElement.querySelectorAll(\".timeCase input\").forEach(item =>\n\n          item.addEventListener('keypress', function (e) {\n\n              e = e || window.event;\n              var charCode = (typeof e.which == \"undefined\") ? e.keyCode : e.which;\n              var charStr = String.fromCharCode(charCode);\n\n              if (!charStr.match(/^[0-9]+$/))\n                  e.preventDefault();\n\n          }));\n\n  }\n\n\n}  // end class\n\n\n// page script (try making this auto instantiate in module like PM does)\n\ncustomElements.define('chronly-hms', ChronlyHMSElement);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ChronlyHMSElement);\n\n\n\n//# sourceURL=webpack://chronlyhms/./src/chrono.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/chrono.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;